'use client'

import api from '@/services/axiosInstance'
import { useAuthStore } from '@/store/authStore'
import Link from 'next/link'
import { useEffect, useState } from 'react'

interface VideoLessonType {
	id: number
	title: string
	description: string
	video_url: string
	thumbnail_url: string
	duration: number
	difficulty: 'beginner' | 'intermediate' | 'advanced'
	views: number
	isCompleted?: boolean
	isLocked?: boolean
	progress?: number
	order?: number
	moduleId?: number
}

export default function VideosPage() {
	const { user } = useAuthStore()
	const [videos, setVideos] = useState<VideoLessonType[]>([])
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<string | null>(null)
	const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
	const [isRefreshing, setIsRefreshing] = useState(false)
	const [updatedVideoIds, setUpdatedVideoIds] = useState<number[]>([])

	// –í—ã–Ω–µ—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetchVideos –∑–∞ –ø—Ä–µ–¥–µ–ª—ã useEffect
	const fetchVideos = async (showLoading = true) => {
		try {
			if (showLoading) {
				setLoading(true)
			} else {
				setIsRefreshing(true) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
			}

			setError(null)
			const response = await api.get('/video-lessons')
			console.log(
				'üì• –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:',
				new Date().toLocaleTimeString()
			)

			// –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ —Å –∏–∑–º–µ–Ω–∏–≤—à–∏–º—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
			const updatedIds: number[] = []

			if (videos.length > 0) {
				response.data.forEach((newVideo: VideoLessonType) => {
					const oldVideo = videos.find(v => v.id === newVideo.id)
					if (oldVideo && oldVideo.progress !== newVideo.progress) {
						updatedIds.push(newVideo.id)
						console.log(
							`‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤–∏–¥–µ–æ #${newVideo.id}: ${
								oldVideo.progress || 0
							}% ‚Üí ${newVideo.progress || 0}%`
						)
					}
				})
			}

			// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
			const processedVideos = response.data.map((video: VideoLessonType) => {
				// –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
				const processedVideo = { ...video }

				// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–æ —á–∏—Å–ª–æ
				if (
					processedVideo.progress === undefined ||
					processedVideo.progress === null
				) {
					processedVideo.progress = 0
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ
				try {
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª—é—á–µ localStorage –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
					const localProgressKey = user
						? `video-progress-${user.id}-${processedVideo.id}`
						: `video-progress-guest-${processedVideo.id}`
					const savedProgress = localStorage.getItem(localProgressKey)

					if (savedProgress) {
						const localProgress = parseInt(savedProgress)
						if (
							!isNaN(localProgress) &&
							localProgress > processedVideo.progress
						) {
							console.log(
								`üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤–∏–¥–µ–æ #${processedVideo.id}: ${localProgress}% (—Å–µ—Ä–≤–µ—Ä: ${processedVideo.progress}%)`
							)
							processedVideo.progress = localProgress

							// –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
							api
								.put(`/video-lessons/${processedVideo.id}/progress`, {
									progress: localProgress,
								})
								.catch(e => console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e))
						}
					}
				} catch (e) {
					console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e)
				}

				// –û–∫—Ä—É–≥–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
				processedVideo.progress = Math.round(processedVideo.progress)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ª–∏ —É—Ä–æ–∫ (80% –∏–ª–∏ –±–æ–ª—å—à–µ)
				processedVideo.isCompleted = processedVideo.progress >= 80

				// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è UX
				processedVideo.isLocked = false

				return processedVideo
			})

			console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ:', processedVideos.length)

			setVideos(processedVideos)
			setLastUpdate(new Date())

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö ID –≤–∏–¥–µ–æ
			if (updatedIds.length > 0) {
				setUpdatedVideoIds(updatedIds)
				// –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏
				setTimeout(() => {
					setUpdatedVideoIds([])
				}, 3000)
			}
		} catch (err) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤:', err)
			setError(
				err instanceof Error
					? err.message
					: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
			)
			loadDemoData() // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		} finally {
			if (showLoading) {
				setLoading(false)
			} else {
				setIsRefreshing(false) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			}
		}
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤
	useEffect(() => {
		// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
		fetchVideos(true)

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
		const refreshInterval = setInterval(() => {
			fetchVideos(false) // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
		}, 30000) // 30 —Å–µ–∫—É–Ω–¥

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
		const handleVisibilityChange = () => {
			if (document.visibilityState === 'visible') {
				console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ')
				fetchVideos(false)
			}
		}

		document.addEventListener('visibilitychange', handleVisibilityChange)

		// –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		return () => {
			clearInterval(refreshInterval)
			document.removeEventListener('visibilitychange', handleVisibilityChange)
		}
	}, [user])

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
	const loadDemoData = () => {
		const demoVideos: VideoLessonType[] = [
			{
				id: 1,
				title: '–î–æ–º–±—ã—Ä–∞–Ω—ã –¥“±—Ä—ã—Å “±—Å—Ç–∞—É',
				description:
					'–î–æ–º–±—ã—Ä–∞–Ω—ã “õ–∞–ª–∞–π –¥“±—Ä—ã—Å “±—Å—Ç–∞—É –∫–µ—Ä–µ–∫. –û—Ç—ã—Ä—ã—Å, “õ–æ–ª “õ–∞–ª–ø—ã –∂”ô–Ω–µ –Ω–µ–≥—ñ–∑–≥—ñ –æ–π—ã–Ω ”ô–¥—ñ—Å—Ç–µ—Ä—ñ.',
				video_url: '/videos/demo/dombyra-basics.mp4',
				thumbnail_url: '/images/demo/video1.jpg',
				duration: 1320, // 22 –º–∏–Ω—É—Ç—ã
				difficulty: 'beginner',
				views: 1245,
				isCompleted: true, // –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω
				isLocked: false,
				order: 1,
				progress: 100,
				moduleId: 1,
			},
			{
				id: 2,
				title: '–ù–µ–≥—ñ–∑–≥—ñ –∞–∫–∫–æ—Ä–¥—Ç–∞—Ä',
				description:
					'–î–æ–º–±—ã—Ä–∞“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –Ω–µ–≥—ñ–∑–≥—ñ –∞–∫–∫–æ—Ä–¥—Ç–∞—Ä. –ë“±–ª —Å–∞–±–∞“õ—Ç–∞ –±—ñ–∑ –±–∞—Ä–ª—ã“õ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç”ô—Å—ñ–ª–¥–µ—Ä –º–µ–Ω –æ—Ä—ã–Ω–¥–∞—É –µ—Ä–µ–∫—à–µ–ª—ñ–∫—Ç–µ—Ä—ñ–Ω “õ–∞—Ä–∞—Å—Ç—ã—Ä–∞–º—ã–∑.',
				video_url: '/videos/demo/adai-tutorial.mp4',
				thumbnail_url: '/images/demo/video2.jpg',
				duration: 2340, // 39 –º–∏–Ω—É—Ç
				difficulty: 'beginner',
				views: 873,
				isCompleted: false,
				isLocked: false,
				order: 2,
				progress: 0,
				moduleId: 1,
			},
			{
				id: 3,
				title: '“ö–∞—Ä–∞–ø–∞–π—ã–º –∫“Ø–π–ª–µ—Ä',
				description:
					'–ë–∞—Å—Ç–∞—É—ã—à“õ–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω “õ–∞—Ä–∞–ø–∞–π—ã–º –∫“Ø–π–ª–µ—Ä. –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –¥–∞“ì–¥—ã–ª–∞—Ä–¥—ã –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É –∂”ô–Ω–µ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–¥—ã –∫–µ“£–µ–π—Ç—É “Ø—à—ñ–Ω.',
				video_url: '/videos/demo/advanced-techniques.mp4',
				thumbnail_url: '/images/demo/video3.jpg',
				duration: 2820, // 47 –º–∏–Ω—É—Ç
				difficulty: 'beginner',
				views: 621,
				isCompleted: false,
				isLocked: false,
				order: 3,
				progress: 0,
				moduleId: 1,
			},
			{
				id: 4,
				title: '–´—Ä“ì–∞“õ –ø–µ–Ω —Ç–µ–º–ø',
				description:
					'–î–æ–º–±—ã—Ä–∞ –æ–π—ã–Ω—ã–Ω–¥–∞“ì—ã —ã—Ä“ì–∞“õ –ø–µ–Ω —Ç–µ–º–ø. –ë—ñ—Ä“õ–∞–ª—ã–ø—Ç—ã –æ–π—ã–Ω –º–µ–Ω —Ç–µ–∑ –æ–π—ã–Ω–¥—ã –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É.',
				video_url: '/videos/demo/rythm-tempo.mp4',
				thumbnail_url: '/images/demo/video1.jpg',
				duration: 1840, // 30 –º–∏–Ω—É—Ç
				difficulty: 'beginner',
				views: 542,
				isCompleted: false,
				isLocked: false,
				order: 4,
				progress: 0,
				moduleId: 1,
			},
			{
				id: 5,
				title: '–û—Ä—Ç–∞—à–∞ –¥–µ“£–≥–µ–π–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–µ—Ö–Ω–∏–∫–∞–ª–∞—Ä',
				description:
					'–û—Ä—Ç–∞—à–∞ –¥–µ“£–≥–µ–π–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –¥–æ–º–±—ã—Ä–∞ –æ–π—ã–Ω—ã. “ö–æ–ª–¥—ã –æ—Ä–Ω–∞–ª–∞—Å—Ç—ã—Ä—É –∂”ô–Ω–µ —Ç–µ–∑ –æ–π–Ω–∞—É ”ô–¥—ñ—Å—Ç–µ—Ä—ñ.',
				video_url: '/videos/demo/intermediate-techniques.mp4',
				thumbnail_url: '/images/demo/video2.jpg',
				duration: 2520, // 42 –º–∏–Ω—É—Ç—ã
				difficulty: 'intermediate',
				views: 412,
				isCompleted: false,
				isLocked: false,
				order: 5,
				progress: 0,
				moduleId: 2,
			},
			{
				id: 6,
				title: '–ö“Ø—Ä–¥–µ–ª—ñ –∫“Ø–π–ª–µ—Ä–¥—ñ“£ “õ–∞—Ç–ø–∞—Ä–ª–∞—Ä—ã',
				description:
					'–ö“Ø—Ä–¥–µ–ª—ñ –∫“Ø–π–ª–µ—Ä–¥—ñ –æ—Ä—ã–Ω–¥–∞—É–¥—ã“£ –µ—Ä–µ–∫—à–µ–ª—ñ–∫—Ç–µ—Ä—ñ. –ñ–æ“ì–∞—Ä—ã —à–µ–±–µ—Ä–ª—ñ–∫–∫–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.',
				video_url: '/videos/demo/complex-kuy.mp4',
				thumbnail_url: '/images/demo/video3.jpg',
				duration: 3120, // 52 –º–∏–Ω—É—Ç—ã
				difficulty: 'advanced',
				views: 310,
				isCompleted: false,
				isLocked: false,
				order: 6,
				progress: 0,
				moduleId: 3,
			},
		]

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ
		const processedVideos = demoVideos.map(video => {
			// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–æ —á–∏—Å–ª–æ
			if (video.progress === undefined || video.progress === null) {
				video.progress = 0
			}

			// –û–∫—Ä—É–≥–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
			video.progress = Math.round(video.progress)

			// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
			video.isLocked = false

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ª–∏ —É—Ä–æ–∫
			video.isCompleted = video.progress >= 80

			return video
		})

		setVideos(processedVideos)
		setLastUpdate(new Date())
	}

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
	if (loading) {
		return (
			<div className='flex justify-center items-center min-h-screen bg-[#FBF7F4]'>
				<div className='animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[#2A3F54]'></div>
			</div>
		)
	}

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
	if (error) {
		return (
			<div className='container mx-auto px-4 py-8 bg-[#FBF7F4]'>
				<div className='max-w-4xl mx-auto'>
					<div className='bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg'>
						{error}
					</div>
				</div>
			</div>
		)
	}

	return (
		<div className='bg-[#FBF7F4]'>
			<div className='container mx-auto px-4 py-8'>
				<div className='max-w-6xl mx-auto'>
					{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
					<div className='mb-16 text-center'>
						<h1 className='text-[80px] font-bold text-[#2A3F54] mb-4'>
							–û“õ—ã—Ç—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞—Å—ã
						</h1>
						<p className='text-[30px] text-[#2A3F54] max-w-4xl mx-auto'>
							–î–æ–º–±—ã—Ä–∞ –æ–π–Ω–∞—É–¥—ã “Ø–π—Ä–µ–Ω—É–¥—ñ“£ —Ç–æ–ª—ã“õ –∫—É—Ä—Å—ã. ”ò—Ä –¥–µ“£–≥–µ–π –±–æ–π—ã–Ω—à–∞
							–∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä, –≤–∏–¥–µ–æ —Å–∞–±–∞“õ—Ç–∞—Ä –∂”ô–Ω–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä.
						</p>
					</div>

					{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö */}
					<div className='mb-12 flex items-center justify-end text-sm text-gray-500'>
						<div>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate.toLocaleTimeString()}</div>
						<button
							onClick={() => fetchVideos(false)}
							className={`ml-4 px-3 py-1 rounded transition-colors flex items-center ${
								isRefreshing
									? 'bg-blue-100 text-blue-700'
									: 'bg-blue-50 text-blue-600 hover:bg-blue-100'
							}`}
							disabled={isRefreshing}
						>
							<svg
								className={`w-4 h-4 mr-1 ${isRefreshing ? 'animate-spin' : ''}`}
								fill='none'
								stroke='currentColor'
								viewBox='0 0 24 24'
							>
								<path
									strokeLinecap='round'
									strokeLinejoin='round'
									strokeWidth='2'
									d='M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15'
								/>
							</svg>
							{isRefreshing ? '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...' : '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
						</button>
					</div>

					{/* –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ */}
					<div className='space-y-6'>
						<h2 className='text-[30px] font-bold text-[#2A3F54] mb-4'>
							–í–∏–¥–µ–æ—É—Ä–æ–∫–∏
						</h2>

						{/* –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ ID –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è */}
						{videos
							.sort((a, b) => a.id - b.id)
							.map((lesson, index) => (
								<div
									key={lesson.id}
									className={`rounded-[15px] shadow-md overflow-hidden transition-all ${
										// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
										updatedVideoIds.includes(lesson.id)
											? 'ring-4 ring-blue-400 transform scale-[1.02]'
											: ''
									} ${
										// –°—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
										lesson.isCompleted
											? 'bg-green-50 border border-green-200' // “ö–∞—Ä–∞–ª–¥—ã
											: lesson.progress === undefined || lesson.progress === 0
											? 'bg-white' // –ù–µ –Ω–∞—á–∞—Ç–æ
											: lesson.progress < 25
											? 'bg-blue-50 border border-blue-100' // –¢–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç–æ
											: lesson.progress < 50
											? 'bg-yellow-50 border border-yellow-100' // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
											: lesson.progress < 80
											? 'bg-orange-50 border border-orange-100' // –ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
											: 'bg-green-50 border border-green-200' // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
									}`}
								>
									{/* –ë–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ */}
									<div className='relative'>
										{/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–≤–µ—Ä—Ö—É –∫–∞—Ä—Ç–æ—á–∫–∏ */}
										<div className='h-1 w-full bg-gray-200'>
											<div
												className={`h-full transition-all duration-300 ${
													lesson.isCompleted ? 'bg-green-500' : 'bg-blue-600'
												}`}
												style={{ width: `${lesson.progress || 0}%` }}
											></div>
										</div>
									</div>

									<Link
										href={`/videos/${lesson.id}`}
										className={`block relative transition-all ${
											lesson.isLocked
												? 'opacity-70 cursor-not-allowed'
												: lesson.isCompleted
												? 'hover:bg-green-100'
												: lesson.progress !== undefined && lesson.progress >= 50
												? 'hover:bg-orange-100'
												: lesson.progress !== undefined && lesson.progress >= 25
												? 'hover:bg-yellow-100'
												: lesson.progress !== undefined && lesson.progress > 0
												? 'hover:bg-blue-100'
												: 'hover:bg-[#f8f4f0]'
										}`}
										onClick={e => {
											if (lesson.isLocked) {
												e.preventDefault()
											}
										}}
									>
										<div className='flex items-center p-4'>
											{/* –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ —Å —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
											<div className='relative mr-4'>
												{/* –ö—Ä—É–≥–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
												{lesson.progress !== undefined &&
													lesson.progress > 0 && (
														<svg
															className='absolute -top-1 -left-1 w-14 h-14'
															viewBox='0 0 36 36'
														>
															<circle
																cx='18'
																cy='18'
																r='16'
																fill='none'
																className={`stroke-2 ${
																	lesson.isCompleted
																		? 'stroke-green-500' // –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ
																		: lesson.progress < 25
																		? 'stroke-blue-500' // –¢–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç–æ
																		: lesson.progress < 50
																		? 'stroke-yellow-500' // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
																		: lesson.progress < 80
																		? 'stroke-orange-500' // –ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
																		: 'stroke-green-500' // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
																}`}
																strokeDasharray='100'
																strokeDashoffset={100 - lesson.progress}
																transform='rotate(-90 18 18)'
															/>
														</svg>
													)}
												<div
													className={`w-12 h-12 flex-shrink-0 text-white rounded-full flex items-center justify-center text-xl font-bold ${
														lesson.isCompleted
															? 'bg-green-500' // –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ
															: lesson.progress === undefined ||
															  lesson.progress === 0
															? 'bg-[#2A3F54]' // –ù–µ –Ω–∞—á–∞—Ç–æ
															: lesson.progress < 25
															? 'bg-blue-500' // –¢–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç–æ
															: lesson.progress < 50
															? 'bg-yellow-500' // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
															: lesson.progress < 80
															? 'bg-orange-500' // –ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
															: 'bg-green-500' // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
													}`}
												>
													{index + 1}
												</div>
											</div>

											{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ */}
											<div className='flex-grow'>
												<h3 className='text-[22px] font-semibold text-[#2A3F54] flex items-center flex-wrap'>
													{lesson.title}
													{lesson.isCompleted && (
														<span className='ml-2 bg-green-100 text-green-800 font-bold px-2 py-1 rounded-md text-sm flex items-center'>
															<svg
																className='w-4 h-4 mr-1'
																fill='none'
																stroke='currentColor'
																viewBox='0 0 24 24'
															>
																<path
																	strokeLinecap='round'
																	strokeLinejoin='round'
																	strokeWidth='2'
																	d='M5 13l4 4L19 7'
																></path>
															</svg>
															“ö–∞—Ä–∞–ª–¥—ã
														</span>
													)}
													{lesson.progress !== undefined &&
														lesson.progress > 0 &&
														!lesson.isCompleted && (
															<span
																className={`ml-2 text-sm font-semibold px-3 py-1 rounded-full shadow-sm ${
																	lesson.progress < 25
																		? 'bg-blue-100 text-blue-600' // –¢–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç–æ
																		: lesson.progress < 50
																		? 'bg-yellow-100 text-yellow-600' // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
																		: lesson.progress < 80
																		? 'bg-orange-100 text-orange-600' // –ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
																		: 'bg-green-100 text-green-600' // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
																}`}
															>
																{lesson.progress < 25
																	? '–ë–∞—Å—Ç–∞–ª–¥—ã'
																	: lesson.progress < 50
																	? '“Æ—Ä–¥—ñ—Å—Ç–µ'
																	: lesson.progress < 80
																	? '–ê—è“õ—Ç–∞–ª—ã–ø –∂–∞—Ç—ã—Ä'
																	: '“ö–∞—Ä–∞–ª–¥—ã'}{' '}
																{Math.round(lesson.progress)}%
															</span>
														)}
												</h3>

												{/* –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
												{/* <p className='text-[#5A6C7F] line-clamp-2'>
													{lesson.description}
												</p> */}

												{/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ */}
												<div className='flex items-center mt-2 text-sm text-[#5A6C7F]'>
													<span className='flex items-center mr-4'>
														<svg
															className='w-4 h-4 mr-1'
															fill='none'
															stroke='currentColor'
															viewBox='0 0 24 24'
														>
															<path
																strokeLinecap='round'
																strokeLinejoin='round'
																strokeWidth='2'
																d='M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z'
															></path>
														</svg>
														{Math.floor(lesson.duration / 60)} –º–∏–Ω
													</span>

													{/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö */}
													{(lesson.progress || 0) > 0 && (
														<span className='flex items-center'>
															<svg
																className='w-4 h-4 mr-1'
																fill='none'
																stroke='currentColor'
																viewBox='0 0 24 24'
															>
																<path
																	strokeLinecap='round'
																	strokeLinejoin='round'
																	strokeWidth='2'
																	d='M19 9l-7 7-7-7'
																></path>
															</svg>
															<span
																className={`font-medium ${
																	lesson.isCompleted
																		? 'text-green-600'
																		: 'text-blue-600'
																}`}
															>
																{lesson.isCompleted
																	? '“ö–∞—Ä–∞–ª–¥—ã'
																	: `${lesson.progress || 0}% “õ–∞—Ä–∞–ª–¥—ã`}
															</span>
														</span>
													)}
												</div>
											</div>

											{/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ø—Ä–∞–≤–∞ */}
											<div className='ml-4 flex items-center'>
												{/* –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
												{lesson.progress !== undefined &&
													lesson.progress > 0 && (
														<div
															className={`text-center mr-3 bg-gray-50 rounded-lg p-2 border transition-all ${
																updatedVideoIds.includes(lesson.id)
																	? 'animate-pulse border-blue-400'
																	: ''
															}`}
														>
															<div
																className={`text-3xl font-bold ${
																	lesson.isCompleted
																		? 'text-green-600' // –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ
																		: lesson.progress < 25
																		? 'text-blue-600' // –¢–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç–æ
																		: lesson.progress < 50
																		? 'text-yellow-600' // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
																		: lesson.progress < 80
																		? 'text-orange-600' // –ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
																		: 'text-green-600' // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
																}`}
															>
																{lesson.isCompleted
																	? '‚úì'
																	: Math.round(lesson.progress)}
																{!lesson.isCompleted && '%'}
															</div>
															<div className='text-xs text-gray-500'>
																{lesson.isCompleted ? '“õ–∞—Ä–∞–ª–¥—ã' : '“õ–∞—Ä–∞–ª–¥—ã'}
															</div>
														</div>
													)}

												{lesson.isLocked && (
													<div className='p-3 bg-gray-100 rounded-full'>
														<svg
															className='w-6 h-6 text-gray-400'
															fill='none'
															stroke='currentColor'
															viewBox='0 0 24 24'
															xmlns='http://www.w3.org/2000/svg'
														>
															<path
																strokeLinecap='round'
																strokeLinejoin='round'
																strokeWidth={2}
																d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z'
															></path>
														</svg>
													</div>
												)}

												{!lesson.isLocked && (
													<div
														className={`p-3 rounded-full ${
															lesson.isCompleted
																? 'bg-green-100'
																: 'bg-gray-100'
														}`}
													>
														{lesson.isCompleted ? (
															<svg
																className='w-6 h-6 text-green-600'
																fill='none'
																stroke='currentColor'
																viewBox='0 0 24 24'
																xmlns='http://www.w3.org/2000/svg'
															>
																<path
																	strokeLinecap='round'
																	strokeLinejoin='round'
																	strokeWidth={2}
																	d='M5 13l4 4L19 7'
																></path>
															</svg>
														) : (
															<svg
																className='w-6 h-6 text-gray-400'
																fill='none'
																stroke='currentColor'
																viewBox='0 0 24 24'
																xmlns='http://www.w3.org/2000/svg'
															>
																<path
																	strokeLinecap='round'
																	strokeLinejoin='round'
																	strokeWidth={2}
																	d='M9 5l7 7-7 7'
																></path>
															</svg>
														)}
													</div>
												)}
											</div>
										</div>
									</Link>

									{/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–Ω–∏–∑—É –∫–∞—Ä—Ç–æ—á–∫–∏ */}
									<div className='relative'>
										<div className='h-1 w-full bg-gray-200'>
											<div
												className={`h-full transition-all duration-300 ${
													lesson.isCompleted ? 'bg-green-500' : 'bg-blue-600'
												}`}
												style={{ width: `${lesson.progress || 0}%` }}
											></div>
										</div>
									</div>
								</div>
							))}
					</div>
				</div>
			</div>
		</div>
	)
}
