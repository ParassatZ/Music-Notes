import { NextRequest, NextResponse } from 'next/server'

// –û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
export async function DELETE(req: NextRequest) {
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
		const authHeader = req.headers.get('Authorization')

		if (!authHeader || !authHeader.startsWith('Bearer ')) {
			return NextResponse.json(
				{ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
				{ status: 401 }
			)
		}

		console.log(
			'üìù DELETE avatar request received with auth token:',
			authHeader.substring(0, 15) + '...'
		)

		// –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ –±—ç–∫–µ–Ω–¥—É - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
		const backendUrl = 'http://localhost:5000/api/auth/profile/avatar'
		console.log('üîó Forwarding avatar delete request to backend:', backendUrl)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		const response = await fetch(backendUrl, {
			method: 'DELETE',
			headers: {
				Authorization: authHeader,
				'Content-Type': 'application/json',
			},
		})

		// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
		console.log(`üîÑ Backend response status: ${response.status}`)

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		let data
		const contentType = response.headers.get('content-type')
		const hasJsonContent =
			contentType && contentType.includes('application/json')

		try {
			if (hasJsonContent) {
				data = await response.json()
				console.log('üìä Response data:', data)
			} else {
				const text = await response.text()
				console.log(
					`üìù Response text: ${text.substring(0, 100)}${
						text.length > 100 ? '...' : ''
					}`
				)
			}
		} catch (parseError) {
			console.error('‚ö†Ô∏è Error parsing response:', parseError)
		}

		if (!response.ok) {
			console.error(`‚ùå Error deleting avatar: ${response.status}`, data)
			return NextResponse.json(
				data || { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞' },
				{ status: response.status }
			)
		}

		return NextResponse.json(data || { message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' }, {
			status: 200,
		})
	} catch (error) {
		console.error('‚ùå Error proxying avatar delete request:', error)
		return NextResponse.json(
			{ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞' },
			{ status: 500 }
		)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
export async function POST(req: NextRequest) {
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
		const authHeader = req.headers.get('Authorization')

		if (!authHeader || !authHeader.startsWith('Bearer ')) {
			return NextResponse.json(
				{ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
				{ status: 401 }
			)
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
		const formData = await req.formData()

		// –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ –±—ç–∫–µ–Ω–¥—É
		const backendUrl = 'http://localhost:5000/api/auth/avatar'

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
		const response = await fetch(backendUrl, {
			method: 'POST',
			headers: {
				Authorization: authHeader,
				// –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º Content-Type, –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è FormData
			},
			body: formData,
		})

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
		const data = await response.json()

		if (!response.ok) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: ${response.status}`, data)
			return NextResponse.json(data, { status: response.status })
		}

		return NextResponse.json(data, { status: 200 })
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error)
		return NextResponse.json(
			{ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞' },
			{ status: 500 }
		)
	}
}
