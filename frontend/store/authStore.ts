import api, { ApiError } from '@/services/axiosInstance'
import Cookies from 'js-cookie'
import { jwtDecode } from 'jwt-decode'
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

export interface User {
	id: number
	username: string
	email: string
	avatar?: string | null
	role: 'user' | 'admin'
}

interface AuthState {
	user: User | null
	token: string | null
	isLoading: boolean
	error: string | null

	// –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	login: (user: User, token: string) => void
	register: (
		username: string,
		email: string,
		password: string
	) => Promise<{ success: boolean; error?: string }>
	logout: () => void
	refreshToken: () => Promise<boolean>

	// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
	fetchProfile: () => Promise<void>
	updateProfile: (data: Partial<User>) => Promise<void>
	deleteAvatar: () => Promise<void>

	// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
	setLoading: (loading: boolean) => void
	// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—à–∏–±–∫–∏
	setError: (error: string | null) => void
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
let refreshTokenTimeout: NodeJS.Timeout | null = null

export const useAuthStore = create<AuthState>()(
	persist(
		(set, get) => ({
			user: null,
			token: null,
			isLoading: false,
			error: null,

			// –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞
			login: (user, token) => {
				set({ user, token, error: null })
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∞—Ö –∏ localStorage —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
				Cookies.set('token', token, {
					expires: 1, // 1 –¥–µ–Ω—å
					path: '/',
					sameSite: 'strict',
				})
				localStorage.setItem('jwtToken', token)

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ axios
				if (typeof window !== 'undefined') {
					console.log(
						'üîë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:',
						token.substring(0, 15) + '...'
					)
				}

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
				setupTokenRefresh(token)
			},

			// –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			register: async (username: string, email: string, password: string) => {
				try {
					console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:', {
						email,
						username,
						passwordLength: password.length,
					})

					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤–º–µ—Å—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ
					const regResponse = await fetch('/api/auth/register', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ email, username, password }),
						credentials: 'include', // –í–∫–ª—é—á–∞–µ–º –∫—É–∫–∏
					})

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è JSON
					if (!regResponse.ok) {
						const errorText = await regResponse.text()

						// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
						let errorMessage: string
						try {
							const errorData = JSON.parse(errorText)

							// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ –æ—à–∏–±–∫–∏
							if (
								errorData.error &&
								(errorData.error.includes(
									'Email –∏–ª–∏ Username —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è'
								) ||
									errorData.error.includes('—É–∂–µ –∑–∞–Ω—è—Ç—ã'))
							) {
								// –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é
								console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errorData.error)
								errorMessage = errorData.error
								// –î–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–æ–º —É—Å–ø–µ—Ö–∞
								return { success: false, error: errorMessage }
							} else {
								// –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
								console.error(
									'Registration failed with status:',
									regResponse.status
								)
								console.error('Error response:', errorText)
								errorMessage =
									errorData.error || `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${regResponse.status}`
							}
						} catch {
							// –ï—Å–ª–∏ JSON –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
							console.error(
								'Registration failed with status:',
								regResponse.status
							)
							console.error('Error response:', errorText)
							errorMessage = `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (${
								regResponse.status
							}): ${errorText.substring(0, 100)}`
						}

						throw new Error(errorMessage)
					}

					// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π
					let regData
					try {
						regData = await regResponse.json()
						console.log('Registration response:', regResponse.status, regData)
					} catch (parseError) {
						console.error('Error parsing registration response:', parseError)
						throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
					}

					console.log('Registration successful, now logging in...')

					// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
					// —Å —Ç–µ–º–∏ –∂–µ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
					const loginResponse = await fetch('/api/auth/login', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ email, password }),
						credentials: 'include',
					})

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è JSON
					if (!loginResponse.ok) {
						const errorText = await loginResponse.text()
						console.error(
							'Auto-login after registration failed with status:',
							loginResponse.status
						)
						console.error('Error response:', errorText)
						throw new Error(
							'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è'
						)
					}

					// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π
					let loginData
					try {
						loginData = await loginResponse.json()
						console.log('Auto-login response:', loginResponse.status, loginData)
					} catch (parseError) {
						console.error('Error parsing auto-login response:', parseError)
						throw new Error(
							'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—Ö–æ–¥–µ'
						)
					}

					if (!loginData.token || !loginData.user) {
						console.error(
							'Auto-login response missing token or user:',
							loginData
						)
						throw new Error(
							'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
						)
					}

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
					localStorage.setItem('jwtToken', loginData.token)
					Cookies.set('token', loginData.token, {
						expires: 1,
						path: '/',
						sameSite: 'strict',
					})

					// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					set({
						user: loginData.user,
						token: loginData.token,
						error: null,
					})

					// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
					setupTokenRefresh(loginData.token)

					return { success: true }
				} catch (error) {
					console.error('Registration process failed:', error)
					// –î–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
					throw error
				}
			},

			// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
			refreshToken: async () => {
				try {
					const currentToken =
						get().token ||
						localStorage.getItem('jwtToken') ||
						Cookies.get('token')
					if (!currentToken) {
						console.log('No token to refresh')
						return false
					}

					console.log('Attempting to refresh token with payload', {
						token: currentToken.substring(0, 15) + '...',
					})

					// –¢–µ–ø–µ—Ä—å api –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫
					const response = await api.post('/auth/refresh-token', {
						token: currentToken,
					})

					if (response.data && response.data.token) {
						const { token, user } = response.data

						console.log(
							'Token refreshed successfully, new expiry:',
							new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
						)

						// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
						set({ token, user })

						// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –∏ cookies
						localStorage.setItem('jwtToken', token)
						Cookies.set('token', token, {
							expires: 1, // 1 –¥–µ–Ω—å
							path: '/',
							sameSite: 'strict',
						})

						// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
						setupTokenRefresh(token)

						return true
					} else {
						console.error(
							'Invalid response from refresh token endpoint:',
							response.data
						)
						return false
					}
				} catch (error: unknown) {
					console.error('Error refreshing token:', error)

					// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
					if (error && typeof error === 'object' && 'response' in error) {
						const apiError = error as ApiError
						if (
							apiError.response &&
							'status' in apiError.response &&
							(apiError.response.status === 401 ||
								apiError.response.status === 403)
						) {
							console.log(
								'Token refresh failed due to authorization error, logging out'
							)
							get().logout()
						}
					}

					return false
				}
			},

			// –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—Ö–æ–¥–∞
			logout: () => {
				set({ user: null, token: null })
				Cookies.remove('token', { path: '/' })
				localStorage.removeItem('jwtToken')

				// –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
				if (refreshTokenTimeout) {
					clearTimeout(refreshTokenTimeout)
					refreshTokenTimeout = null
				}
			},

			// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
			fetchProfile: async () => {
				try {
					set({ isLoading: true, error: null })
					const token = Cookies.get('token') || localStorage.getItem('jwtToken')

					if (!token) {
						throw new Error('No authentication token found')
					}

					console.log(
						'‚è≥ Fetching profile with token:',
						token.substring(0, 15) + '...'
					)

					// –ò—Å–ø–æ–ª—å–∑—É–µ–º api.get —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
					const response = await api.get('/auth/profile', {
						headers: {
							Authorization: `Bearer ${token}`,
						},
					})

					console.log('‚úÖ Profile fetched successfully:', response.data)
					set({ user: response.data })
					return response.data
				} catch (error: unknown) {
					const err = error as Error
					console.error('‚ùå Error fetching profile:', error)

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
					if (error && typeof error === 'object' && 'response' in error) {
						const apiError = error as ApiError
						if (apiError.response) {
							console.error(
								'Server error details:',
								apiError.response.status,
								apiError.response.data
							)
						}
					}

					set({
						error: err.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
					})
					throw error
				} finally {
					set({ isLoading: false })
				}
			},

			// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
			updateProfile: async data => {
				try {
					set({ isLoading: true, error: null })
					const token = Cookies.get('token') || localStorage.getItem('jwtToken')

					if (!token) {
						throw new Error('No authentication token found')
					}

					console.log('‚è≥ Updating profile with data:', data)

					// –ò—Å–ø–æ–ª—å–∑—É–µ–º api –≤–º–µ—Å—Ç–æ fetch —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
					const response = await api.put('/auth/profile', data, {
						headers: {
							Authorization: `Bearer ${token}`,
						},
					})

					console.log('‚úÖ Profile updated successfully:', response.data)
					set({ user: response.data.user })
					return response.data
				} catch (error: unknown) {
					const err = error as Error
					console.error('‚ùå Error updating profile:', error)

					// –õ–æ–≥–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
					if (error && typeof error === 'object' && 'response' in error) {
						const apiError = error as ApiError
						if (apiError.response) {
							console.error(
								'Server error details:',
								apiError.response.status,
								apiError.response.data
							)
						}
					}

					set({
						error: err.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
					})
					throw error
				} finally {
					set({ isLoading: false })
				}
			},

			// –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
			deleteAvatar: async () => {
				try {
					set({ isLoading: true, error: null })
					const token = Cookies.get('token') || localStorage.getItem('jwtToken')

					if (!token) {
						throw new Error('No authentication token found')
					}

					console.log('‚è≥ Deleting avatar - Token available:', !!token)

					// –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
					console.log(
						'üîç Attempting to delete avatar with URL: /auth/profile/avatar'
					)

					// –ò—Å–ø–æ–ª—å–∑—É–µ–º api –≤–º–µ—Å—Ç–æ fetch —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
					// –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /api, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ api.baseURL
					const response = await api.delete('/auth/profile/avatar', {
						headers: {
							Authorization: `Bearer ${token}`,
						},
					})

					console.log('‚úÖ Avatar deleted successfully:', response.data)

					// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞
					const currentUser = get().user
					if (currentUser) {
						set({
							user: {
								...currentUser,
								avatar: null,
							},
						})
					}

					return response.data
				} catch (error: unknown) {
					const err = error as Error
					console.error('‚ùå Error deleting avatar:', error)

					// –õ–æ–≥–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
					if (error && typeof error === 'object' && 'response' in error) {
						const apiError = error as ApiError
						if (apiError.response) {
							console.error(
								'Server error details:',
								apiError.response.status,
								apiError.response.data
							)
						}
					}

					set({
						error: err.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞',
					})
					throw error
				} finally {
					set({ isLoading: false })
				}
			},

			// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
			setLoading: loading => set({ isLoading: loading }),
			setError: error => set({ error }),
		}),
		{
			name: 'auth-storage',
			partialize: state => ({ user: state.user, token: state.token }),
		}
	)
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const setupTokenRefresh = (token: string) => {
	// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if (refreshTokenTimeout) {
		clearTimeout(refreshTokenTimeout)
		refreshTokenTimeout = null
	}

	if (!token) {
		console.log('No token provided for refresh setup')
		return
	}

	try {
		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
		interface JwtPayload {
			exp?: number
			[key: string]: unknown
		}

		const decoded = jwtDecode<JwtPayload>(token)
		const expiryTime = decoded.exp ? decoded.exp * 1000 : 0 // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

		if (!expiryTime) {
			console.error('Token does not contain expiry information')
			return
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
		const currentTime = Date.now()
		const timeUntilExpiry = expiryTime - currentTime

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
		const refreshTime = timeUntilExpiry - 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

		if (refreshTime <= 0) {
			// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å—Ç–µ–∫ –∏–ª–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
			console.log('Token expired or expiring soon, refreshing immediately')
			useAuthStore.getState().refreshToken()
			return
		}

		console.log(
			`Setting up token refresh in ${Math.round(refreshTime / 60000)} minutes`
		)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
		refreshTokenTimeout = setTimeout(() => {
			console.log('Executing scheduled token refresh')
			useAuthStore.getState().refreshToken()
		}, refreshTime)
	} catch (error: unknown) {
		console.error(
			'Error setting up token refresh:',
			error instanceof Error ? error.message : 'Unknown error'
		)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
export const isTokenExpired = (token: string | null): boolean => {
	if (!token) return true

	try {
		const decoded = jwtDecode<{ exp?: number }>(token)
		if (!decoded.exp) return true

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
		const currentTime = Date.now() / 1000 // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
		return decoded.exp < currentTime
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error)
		return true // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export const validateToken = () => {
	const { token, logout } = useAuthStore.getState()
	const tokenFromStorage =
		localStorage.getItem('jwtToken') || Cookies.get('token')
	const currentToken = token || tokenFromStorage

	if (!currentToken || isTokenExpired(currentToken)) {
		console.log(
			'üîí –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏—Å—Ç–µ–∫, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥'
		)
		logout()

		if (typeof window !== 'undefined') {
			// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
			const currentPath = window.location.pathname
			if (
				!currentPath.includes('/auth/') &&
				!currentPath.includes('/login') &&
				!currentPath.includes('/register')
			) {
				window.location.href = '/auth/login'
			}
		}
		return false
	}

	return true
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const initializeAuthStore = () => {
	const { token } = useAuthStore.getState()
	if (token && typeof window !== 'undefined') {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
		if (isTokenExpired(token)) {
			console.log(
				'üîí –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥'
			)
			useAuthStore.getState().logout()
			return
		}

		// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –º–µ–∂–¥—É localStorage –∏ cookies
		localStorage.setItem('jwtToken', token)
		Cookies.set('token', token, {
			expires: 1,
			path: '/',
			sameSite: 'strict',
		})

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
		setupTokenRefresh(token)
	}
}
